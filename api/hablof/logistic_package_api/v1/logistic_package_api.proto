syntax = "proto3";

package hablof.logistic_package_api.v1;

import "validate/validate.proto";
import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";

option go_package = "github.com/hablof/logistic-package-api/pkg/logistic-package-api;logistic_package_api";

// OmpTemplateApiService - Service for working with templates
service LogisticPackageApiService {

  rpc CreatePackageV1 (CreatePackageV1Request) returns (CreatePackageV1Response){
    option (google.api.http) = {
      post: "/v1/packages"
      body: "*"
    };
  }
  
  rpc DescribePackageV1(DescribePackageV1Request) returns (DescribePackageV1Response) {
    option (google.api.http) = {
      get: "/v1/packages/{PackageID}"
    };
  }

  rpc ListPackagesV1 (ListPackagesV1Request) returns (ListPackagesV1Response){
    option (google.api.http) = {
      get: "/v1/packages"
    };
  }

  rpc RemovePackageV1 (RemovePackageV1Request) returns (RemovePackageV1Response){
    option (google.api.http) = {
      delete: "/v1/packages/{PackageID}"
    };
  }

  rpc UpdatePackageV1 (UpdatePackageV1Request) returns (UpdatePackageV1Response){
    option (google.api.http) = {
      put: "/v1/packages/{PackageID}"
    };
  }
}

message MaybeTimestamp {
  google.protobuf.Timestamp Time = 1;
}

message Package {
  uint64 ID  = 1;
  string Title = 2;
	string Material = 3;
	float MaximumVolume = 4;  //cm^3
	bool Reusable = 5;
  google.protobuf.Timestamp Created = 6;
  MaybeTimestamp Updated = 7;
}

message MaybeBool {
  bool Reusable = 1;
}

// Create

message CreatePackageV1Request {
  string Title = 1 [(validate.rules).string = {max_len: 32, min_len: 1}]; // not empty
	string Material = 2 [(validate.rules).string = {max_len: 32, min_len: 1}]; // not empty
	float MaximumVolume = 3 [(validate.rules).float.gt = 0]; // not 0
	bool Reusable = 4; 
}

message CreatePackageV1Response {
  uint64 ID  = 1;
}

// Describe

message DescribePackageV1Request {
  uint64 PackageID = 1 [(validate.rules).uint64.gt = 0];
}

message DescribePackageV1Response {
  Package Value = 1;
}

// List

message ListPackagesV1Request {
  uint64 Offset = 1 [(validate.rules).uint64.gte = 0];
  uint64 Limit = 2 [(validate.rules).uint64.gte = 0];
}

message ListPackagesV1Response {
  repeated string PackageTitle = 1; // well... not used
  repeated Package Packages = 2;
}

// Remove

message RemovePackageV1Request {
  uint64 PackageID = 1 [(validate.rules).uint64.gt = 0];
}

message RemovePackageV1Response {
  bool Suc = 1;
}

// Update

message UpdatePackageV1Request {
  uint64 PackageID = 1 [(validate.rules).uint64.gt = 0]; // id to update
  string Title = 2 [(validate.rules).string.max_len = 32]; // zero val == empty
	string Material = 3 [(validate.rules).string.max_len = 32]; // zero val == empty
	float MaximumVolume = 4 [(validate.rules).float.gte = 0];  // zero val == empty
	MaybeBool Reusable = 5; 
}

message UpdatePackageV1Response {
  bool Suc = 1;
}