// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package logistic_package_api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LogisticPackageApiServiceClient is the client API for LogisticPackageApiService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LogisticPackageApiServiceClient interface {
	CreatePackageV1(ctx context.Context, in *CreatePackageV1Request, opts ...grpc.CallOption) (*CreatePackageV1Response, error)
	DescribePackageV1(ctx context.Context, in *DescribePackageV1Request, opts ...grpc.CallOption) (*DescribePackageV1Response, error)
	ListPackagesV1(ctx context.Context, in *ListPackagesV1Request, opts ...grpc.CallOption) (*ListPackagesV1Response, error)
	RemovePackageV1(ctx context.Context, in *RemovePackageV1Request, opts ...grpc.CallOption) (*RemovePackageV1Response, error)
}

type logisticPackageApiServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLogisticPackageApiServiceClient(cc grpc.ClientConnInterface) LogisticPackageApiServiceClient {
	return &logisticPackageApiServiceClient{cc}
}

func (c *logisticPackageApiServiceClient) CreatePackageV1(ctx context.Context, in *CreatePackageV1Request, opts ...grpc.CallOption) (*CreatePackageV1Response, error) {
	out := new(CreatePackageV1Response)
	err := c.cc.Invoke(ctx, "/hablof.logistic_package_api.v1.LogisticPackageApiService/CreatePackageV1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logisticPackageApiServiceClient) DescribePackageV1(ctx context.Context, in *DescribePackageV1Request, opts ...grpc.CallOption) (*DescribePackageV1Response, error) {
	out := new(DescribePackageV1Response)
	err := c.cc.Invoke(ctx, "/hablof.logistic_package_api.v1.LogisticPackageApiService/DescribePackageV1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logisticPackageApiServiceClient) ListPackagesV1(ctx context.Context, in *ListPackagesV1Request, opts ...grpc.CallOption) (*ListPackagesV1Response, error) {
	out := new(ListPackagesV1Response)
	err := c.cc.Invoke(ctx, "/hablof.logistic_package_api.v1.LogisticPackageApiService/ListPackagesV1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logisticPackageApiServiceClient) RemovePackageV1(ctx context.Context, in *RemovePackageV1Request, opts ...grpc.CallOption) (*RemovePackageV1Response, error) {
	out := new(RemovePackageV1Response)
	err := c.cc.Invoke(ctx, "/hablof.logistic_package_api.v1.LogisticPackageApiService/RemovePackageV1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LogisticPackageApiServiceServer is the server API for LogisticPackageApiService service.
// All implementations must embed UnimplementedLogisticPackageApiServiceServer
// for forward compatibility
type LogisticPackageApiServiceServer interface {
	CreatePackageV1(context.Context, *CreatePackageV1Request) (*CreatePackageV1Response, error)
	DescribePackageV1(context.Context, *DescribePackageV1Request) (*DescribePackageV1Response, error)
	ListPackagesV1(context.Context, *ListPackagesV1Request) (*ListPackagesV1Response, error)
	RemovePackageV1(context.Context, *RemovePackageV1Request) (*RemovePackageV1Response, error)
	mustEmbedUnimplementedLogisticPackageApiServiceServer()
}

// UnimplementedLogisticPackageApiServiceServer must be embedded to have forward compatible implementations.
type UnimplementedLogisticPackageApiServiceServer struct {
}

func (UnimplementedLogisticPackageApiServiceServer) CreatePackageV1(context.Context, *CreatePackageV1Request) (*CreatePackageV1Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePackageV1 not implemented")
}
func (UnimplementedLogisticPackageApiServiceServer) DescribePackageV1(context.Context, *DescribePackageV1Request) (*DescribePackageV1Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribePackageV1 not implemented")
}
func (UnimplementedLogisticPackageApiServiceServer) ListPackagesV1(context.Context, *ListPackagesV1Request) (*ListPackagesV1Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPackagesV1 not implemented")
}
func (UnimplementedLogisticPackageApiServiceServer) RemovePackageV1(context.Context, *RemovePackageV1Request) (*RemovePackageV1Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemovePackageV1 not implemented")
}
func (UnimplementedLogisticPackageApiServiceServer) mustEmbedUnimplementedLogisticPackageApiServiceServer() {
}

// UnsafeLogisticPackageApiServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LogisticPackageApiServiceServer will
// result in compilation errors.
type UnsafeLogisticPackageApiServiceServer interface {
	mustEmbedUnimplementedLogisticPackageApiServiceServer()
}

func RegisterLogisticPackageApiServiceServer(s grpc.ServiceRegistrar, srv LogisticPackageApiServiceServer) {
	s.RegisterService(&LogisticPackageApiService_ServiceDesc, srv)
}

func _LogisticPackageApiService_CreatePackageV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePackageV1Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogisticPackageApiServiceServer).CreatePackageV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hablof.logistic_package_api.v1.LogisticPackageApiService/CreatePackageV1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogisticPackageApiServiceServer).CreatePackageV1(ctx, req.(*CreatePackageV1Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _LogisticPackageApiService_DescribePackageV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribePackageV1Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogisticPackageApiServiceServer).DescribePackageV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hablof.logistic_package_api.v1.LogisticPackageApiService/DescribePackageV1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogisticPackageApiServiceServer).DescribePackageV1(ctx, req.(*DescribePackageV1Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _LogisticPackageApiService_ListPackagesV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPackagesV1Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogisticPackageApiServiceServer).ListPackagesV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hablof.logistic_package_api.v1.LogisticPackageApiService/ListPackagesV1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogisticPackageApiServiceServer).ListPackagesV1(ctx, req.(*ListPackagesV1Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _LogisticPackageApiService_RemovePackageV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemovePackageV1Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogisticPackageApiServiceServer).RemovePackageV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hablof.logistic_package_api.v1.LogisticPackageApiService/RemovePackageV1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogisticPackageApiServiceServer).RemovePackageV1(ctx, req.(*RemovePackageV1Request))
	}
	return interceptor(ctx, in, info, handler)
}

// LogisticPackageApiService_ServiceDesc is the grpc.ServiceDesc for LogisticPackageApiService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LogisticPackageApiService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "hablof.logistic_package_api.v1.LogisticPackageApiService",
	HandlerType: (*LogisticPackageApiServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreatePackageV1",
			Handler:    _LogisticPackageApiService_CreatePackageV1_Handler,
		},
		{
			MethodName: "DescribePackageV1",
			Handler:    _LogisticPackageApiService_DescribePackageV1_Handler,
		},
		{
			MethodName: "ListPackagesV1",
			Handler:    _LogisticPackageApiService_ListPackagesV1_Handler,
		},
		{
			MethodName: "RemovePackageV1",
			Handler:    _LogisticPackageApiService_RemovePackageV1_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "hablof/logistic_package_api/v1/logistic_package_api.proto",
}
