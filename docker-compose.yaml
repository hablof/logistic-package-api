version: "3.9"

services:

  logistic-package-api:
    image: hablof/logistic-package-api
    restart: unless-stopped
    networks:
      - ompnw
    depends_on:
      - postgres
    ports:
      - 8080:8080 # REST
      - 8082:8082 # gRPC
      - 9100:9100 # Metrics prometheus
      - 8000:8000 # Status prometheus
      # - 40000:40000 # Debug port
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:8000/live']
      interval: 1m
      timeout: 10s
      retries: 3
      start_period: 20s
    volumes:
      # - ./migrations:/root/migrations
      - ./config.yml:/root/config.yml

  logistic-package-api-retranslator:
    image: hablof/logistic-package-api-retranslator
    restart: unless-stopped
    networks:
      - ompnw
    depends_on:
      - postgres
      - kafka
    ports:
      - 9101:9101 # Metrics prometheus
    volumes:
      - ./config.yml:/root/config.yml

  logistic-package-api-bot:
    image: hablof/logistic-package-api-bot
    restart: unless-stopped
    env_file: .env
    networks:
      - ompnw
    depends_on:
      - logistic-package-api
      - kafka
    volumes:
      - ./config.bot.yml:/root/config.yml

  logistic-package-api-facade:
    image: hablof/logistic-package-api-facade
    restart: unless-stopped
    networks:
      - ompnw
    depends_on:
      - kafka
    volumes:
      - ./config.facade.yml:/root/config.yml

  postgres:
    image: postgres:latest
    healthcheck:
      test: [ "CMD", "pg_isready", "-q", "-d", "postgres", "-U", "postgres" ]
      timeout: 45s
      interval: 10s
      retries: 10
    restart: always
    ports:
      - 5432:5432
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: logistic_package_api
      APP_DB_USER: docker
      APP_DB_PASS: docker
      POSTGRES_INITDB_ARGS: '--encoding=UTF-8 --lc-collate=C --lc-ctype=C'
    networks:
      - ompnw
    volumes:
      - pgdata:/var/lib/postgresql/data
      # - ./scripts/init-database.sh:/docker-entrypoint-initdb.d/init-database.sh

  zookeeper:
    image: confluentinc/cp-zookeeper
    restart: unless-stopped
    ports:
      - 2181:2181
    environment:
      zk_id: "1"
      ZOOKEEPER_CLIENT_PORT: 32181
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_SYNC_LIMIT: 2
    networks:
      - ompnw

  kafka:
    image: confluentinc/cp-kafka
    restart: unless-stopped
    depends_on:
      - zookeeper
    ports:
      - 9094:9094
    environment:
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:32181"

      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_LISTENERS: INTERNAL://kafka:9092,OUTSIDE://kafka:9094
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka:9092,OUTSIDE://localhost:9094
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,OUTSIDE:PLAINTEXT
      
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    command: sh -c "((sleep 15 && kafka-topics --create --bootstrap-server kafka:9092 --replication-factor 1 --partitions 1 --topic templates)&) && /etc/confluent/docker/run"
    networks:
      - ompnw

  kafka-ui:
    image: obsidiandynamics/kafdrop
    restart: unless-stopped
    depends_on:
      - kafka
    ports:
      - 9001:9001
    environment:
      SERVER_PORT: 9001
      KAFKA_BROKERCONNECT: "kafka:9092"
      JVM_OPTS: "-Xms16M -Xmx48M -Xss180K -XX:-TieredCompilation -XX:+UseStringDeduplication -noverify"
    networks:
      - ompnw

  # swagger-ui:
  #   image: swaggerapi/swagger-ui
  #   ports:
  #     - 8081:8080
  #   restart: always
  #   volumes:
  #     - ./swagger:/swagger
  #   environment:
  #     SWAGGER_JSON: /swagger/hablof/logistic_package_api/v1/logistic_package_api.swagger.json
  #   depends_on:
  #     - logistic-package-api
  #   networks:
  #     - ompnw

  jaeger:
    image: jaegertracing/all-in-one
    restart: unless-stopped
    ports:
      - 6831:6831/udp
      - 16686:16686
    networks:
      - ompnw

  prometheus:
    image: prom/prometheus:latest
    restart: unless-stopped
    ports:
      - 9090:9090
    networks:
      - ompnw
    volumes:
      - "./prometheus.yml:/etc/prometheus/prometheus.yml"
    # extra_hosts:
    #   - "host.docker.internal:host-gateway"

  grafana:
    image: grafana/grafana:latest
    restart: unless-stopped
    ports:
      - 3000:3000
    links:
      - prometheus
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=MYPASSWORT
      - GF_USERS_ALLOW_SIGN_UP=false
    networks:
      - ompnw
    volumes:
      - "./data/grafana:/var/lib/grafana"
  
  redis:
    image: redis:latest
    restart: unless-stopped
    ports:
      - 6379:6379
    networks:
      - ompnw

volumes:
  pgdata:
    driver: local

networks:
  ompnw:
    driver: bridge
